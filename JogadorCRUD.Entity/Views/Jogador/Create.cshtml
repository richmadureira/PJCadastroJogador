@model JogadorCRUD.Entity.Models.Jogador

@{
    ViewBag.Title = "Create";
}

<h2>Cadastro </h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Jogador</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Nascimento, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Nascimento, "{0:dd/MM/yyyy HH:mm}", new { htmlAttributes = new { @class = "form-control date-timepicker" } })
            @Html.ValidationMessageFor(model => model.Nascimento, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Endereco, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Endereco, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Endereco, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Cpf, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Cpf, new { htmlAttributes = new { id = "cpfValidate", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Cpf, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Posicao, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Posicao, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Posicao, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Time, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Time, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Time, "", new { @class = "text-danger" })
        </div>
    </div>

    



    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Salvar" class="btn btn-default" onclick="return validaCPF()" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Voltar", "Index")
</div>

<script src="@Url.Content("~/Scripts/jquery-1.4.4.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")" type="text/javascript"></script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    


<script type="text/javascript">

    $('.date-timepicker').datetimepicker({
        locale: 'pt-br',
        keepOpen: true,
        showTodayButton: true,
        format: 'DD/MM/YYYY HH:mm'
    });

   

    function validaCPF() {
        
        var s = document.getElementById("cpfValidate").value;
        var i;
        var l = '';
        for (i = 0; i < s.length; i++) if (!isNaN(s.charAt(i))) l += s.charAt(i);
        s = l;
        if (s.length != 11) {
            alert("CPF INVALIDO!");
            return false;
        }
        var c = s.substr(0, 9);
        var dv = s.substr(9, 2);
        var d1 = 0;
        for (i = 0; i < 9; i++) d1 += c.charAt(i) * (10 - i);
        if (d1 == 0) {
            alert("CPF INVALIDO!");
            return false;
        }
        d1 = 11 - (d1 % 11);
        if (d1 > 9) d1 = 0;
        if (dv.charAt(0) != d1) {
            alert("CPF INVALIDO!");
            return false;
        }
        d1 *= 2;
        for (i = 0; i < 9; i++) d1 += c.charAt(i) * (11 - i)
        d1 = 11 - (d1 % 11);
        if (d1 > 9) d1 = 0;
        if (dv.charAt(1) != d1) {
            alert("CPF INVALIDO!");
            return false;
        }
        debugger;
        if (s == "00000000000" ||
            s == "11111111111" ||
            s == "22222222222" ||
            s == "33333333333" ||
            s == "44444444444" ||
            s == "55555555555" ||
            s == "66666666666" ||
            s == "77777777777" ||
            s == "88888888888" ||
            s == "99999999999") {
            alert("CPF INVALIDO!1");
            return false;
        }
        return true;
    }



</script>


}
